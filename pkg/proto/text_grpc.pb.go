// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package text

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FancyTextGeneratorClient is the client API for FancyTextGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FancyTextGeneratorClient interface {
	GetFancyText(ctx context.Context, in *FancyText, opts ...grpc.CallOption) (*FancyText, error)
}

type fancyTextGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewFancyTextGeneratorClient(cc grpc.ClientConnInterface) FancyTextGeneratorClient {
	return &fancyTextGeneratorClient{cc}
}

func (c *fancyTextGeneratorClient) GetFancyText(ctx context.Context, in *FancyText, opts ...grpc.CallOption) (*FancyText, error) {
	out := new(FancyText)
	err := c.cc.Invoke(ctx, "/text.FancyTextGenerator/GetFancyText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FancyTextGeneratorServer is the server API for FancyTextGenerator service.
// All implementations must embed UnimplementedFancyTextGeneratorServer
// for forward compatibility
type FancyTextGeneratorServer interface {
	GetFancyText(context.Context, *FancyText) (*FancyText, error)
	mustEmbedUnimplementedFancyTextGeneratorServer()
}

// UnimplementedFancyTextGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedFancyTextGeneratorServer struct {
}

func (UnimplementedFancyTextGeneratorServer) GetFancyText(context.Context, *FancyText) (*FancyText, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFancyText not implemented")
}
func (UnimplementedFancyTextGeneratorServer) mustEmbedUnimplementedFancyTextGeneratorServer() {}

// UnsafeFancyTextGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FancyTextGeneratorServer will
// result in compilation errors.
type UnsafeFancyTextGeneratorServer interface {
	mustEmbedUnimplementedFancyTextGeneratorServer()
}

func RegisterFancyTextGeneratorServer(s grpc.ServiceRegistrar, srv FancyTextGeneratorServer) {
	s.RegisterService(&FancyTextGenerator_ServiceDesc, srv)
}

func _FancyTextGenerator_GetFancyText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FancyText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FancyTextGeneratorServer).GetFancyText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/text.FancyTextGenerator/GetFancyText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FancyTextGeneratorServer).GetFancyText(ctx, req.(*FancyText))
	}
	return interceptor(ctx, in, info, handler)
}

// FancyTextGenerator_ServiceDesc is the grpc.ServiceDesc for FancyTextGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FancyTextGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "text.FancyTextGenerator",
	HandlerType: (*FancyTextGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFancyText",
			Handler:    _FancyTextGenerator_GetFancyText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/text.proto",
}
